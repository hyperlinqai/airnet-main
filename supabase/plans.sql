-- Create the plans table
create table public.plans (
    id bigint generated by default as identity primary key,
    name text not null,
    price numeric not null,
    download_speed integer not null,
    upload_speed integer not null,
    features text[] not null default '{}',
    is_popular boolean not null default false,
    description text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add RLS (Row Level Security) policies
alter table public.plans enable row level security;

-- Allow public read access
create policy "Allow public read access on plans"
    on public.plans for select
    using (true);

-- Insert sample data
insert into public.plans (name, price, download_speed, upload_speed, features, is_popular, description)
values
    ('Basic Plan', 599, 30, 30, 
    ARRAY['Unlimited Data', 'No FUP Limits', '24/7 Support', 'Free Installation'],
    false,
    'Perfect for basic internet usage, browsing, and email'),

    ('Standard Plan', 999, 50, 50,
    ARRAY['Unlimited Data', 'No FUP Limits', '24/7 Support', 'Free Installation', 'Static IP Available'],
    true,
    'Ideal for streaming, gaming, and work from home'),

    ('Premium Plan', 1499, 100, 100,
    ARRAY['Unlimited Data', 'No FUP Limits', '24/7 Priority Support', 'Free Installation', 'Static IP Included', 'Advanced Security'],
    false,
    'Best for heavy internet users, 4K streaming, and businesses'),

    ('Ultra Plan', 1999, 200, 200,
    ARRAY['Unlimited Data', 'No FUP Limits', '24/7 Priority Support', 'Free Installation', 'Static IP Included', 'Advanced Security', 'Enterprise SLA'],
    false,
    'Enterprise-grade connection for businesses and power users');

-- Create function to automatically update updated_at timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql;

-- Create trigger to call the function before update
create trigger handle_plans_updated_at
    before update on public.plans
    for each row
    execute procedure public.handle_updated_at();
